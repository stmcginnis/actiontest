name: Build
on:
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  # When Go packages are built, buildsys will vendor in dependent Go code for
  # that package and bundle it up in a tarball. This env variable is consumed
  # and used to configure Go to directly download code from its upstream source.
  # This is a useful early signal during GitHub actions to see if there are
  # upstream Go code problems.
  GOPROXY: direct

jobs:
  list-variants:
    if: github.repository == 'stmcginnis/actiontest'
    runs-on: ubuntu-latest
    outputs:
      variants: ${{ steps.get-variants.outputs.variants }}
      aarch-enemies: ${{ steps.get-variants.outputs.aarch-enemies }}
    steps:
      - uses: actions/checkout@v3
      - id: get-variants
        name: Determine variants
        run: |
          cd variants
          output="variants=$(ls -d */ | cut -d'/' -f 1 | grep -vE '^(shared|target)$' | jq -R -s -c 'split("\n")[:-1]')"
          echo $output
          echo $output >> $GITHUB_OUTPUT
          output="aarch-enemies=$(ls -d */ | cut -d'/' -f 1 | grep -E '(^(metal|vmware)|\-dev$)' | jq -R -s -c 'split("\n")[:-1] | [ .[] | {"variant": ., "arch": "aarch64"}]')"
          echo $output
          echo $output >> $GITHUB_OUTPUT

  build:
    needs: list-variants
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        variant: ${{ fromJson(needs.list-variants.outputs.variants) }}
        arch: [x86_64, aarch64]
        exclude: ${{ fromJson(needs.list-variants.outputs.aarch-enemies) }}
      fail-fast: false
    steps:
      - name: Preflight step to set up the runner
        run: |
          echo "OS_ARCH=`uname -m`" >> $GITHUB_ENV
          sudo apt -y install build-essential openssl libssl-dev pkg-config liblz4-tool
      - uses: actions/checkout@v3
      - run: ./Makefile.sh ${{ matrix.variant }}
